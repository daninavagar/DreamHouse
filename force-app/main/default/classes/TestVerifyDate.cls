/**
 * This class contains unit tests for validating the behavior of Apex classes
 * and triggers.
 *
 * Unit tests are class methods that verify whether a particular piece
 * of code is working properly. Unit test methods take no arguments,
 * commit no data to the database, and are flagged with the testMethod
 * keyword in the method definition.
 *
 * All test methods in an org are executed whenever Apex code is deployed
 * to a production org to confirm correctness, ensure code
 * coverage, and prevent regressions. All Apex classes are
 * required to have at least 75% code coverage in order to be deployed
 * to a production org. In addition, all triggers must have some code coverage.
 *
 * The @isTest class annotation indicates this class only contains test
 * methods. Classes defined with the @isTest annotation do not count against
 * the org size limit for all Apex scripts.
 *
 * See the Apex Language Reference for more information about Testing and Code Coverage.
 */
@isTest
private class TestVerifyDate {
  @isTest
  static void checkDates() {
    // TO DO: implement unit test
    Date date1 = System.today();
    Date date2 = System.today().addDays(10);
    Date result = VerifyDate.CheckDates(date1, date2);
    System.assertEquals('2025-07-18 00:00:00', result.toString());
  }

  @IsTest
  static void checkDatesOlder() {
    // Date2 is older than date1. Return date with last day. For example today is
    Date date1 = System.today().addDays(10);
    Date date2 = System.today();
    Date result = VerifyDate.CheckDates(date1, date2);
    System.assertEquals('2025-07-31 00:00:00', result.toString());
  }

  @IsTest
  static void checkDatesEquals() {
    // Date2 is older than date1. Return date with last day. For example today is
    Date date1 = Date.newInstance(2025, 7, 8);
    Date date2 = Date.newInstance(2025, 8, 7);
    Date result = VerifyDate.CheckDates(date1, date2);
    System.assertEquals('2025-07-31 00:00:00', result.toString());
  }
}